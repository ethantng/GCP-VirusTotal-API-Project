main:
  params: [input]
  steps:
    - analyze:
        try:
          call: http.post
          args:
            url: https://vt-analyze-axoq2tyjyq-uc.a.run.app
            auth:
              type: OIDC
              audience: https://vt-analyze-axoq2tyjyq-uc.a.run.app
            timeout: 30
            body: ${input}
          result: analysis
        retry:
          predicate: ${http.default_retry_predicate}
          max_retries: 2
          backoff:
            initial_delay: 2    
            max_delay: 10        
            multiplier: 2.0


    - setFields:
        assign:
          - shortDesc: '${"Auto: Suspicious " + string(input.type)}'
          - sev: ${string(analysis.body.report.severity)}
          - techniquesArr: ${if(analysis.body.report.mitre_techniques == null, [], analysis.body.report.mitre_techniques)}
          - notes: ${if(analysis.body.report.iocs == null, "{}", json.encode_to_string(analysis.body.report.iocs))}


    - initOutputs:
        assign:
          - snowBody: null


    - maybeIncident:
        switch:
          - condition: ${default(input.createIncident, false)}
            next: getSNInstance
        next: return


    - getSNInstance:
        call: googleapis.secretmanager.v1.projects.secrets.versions.access
        args:
          name: projects/blissful-link-468523-s9/secrets/SERVICENOW_INSTANCE/versions/latest
        result: snInstanceRaw


    - getSNUser:
        call: googleapis.secretmanager.v1.projects.secrets.versions.access
        args:
          name: projects/blissful-link-468523-s9/secrets/SERVICENOW_USER/versions/latest
        result: snUserRaw


    - getSNPass:
        call: googleapis.secretmanager.v1.projects.secrets.versions.access
        args:
          name: projects/blissful-link-468523-s9/secrets/SERVICENOW_PASSWORD/versions/latest
        result: snPassRaw


    - decodeSecrets:
        assign:
          - snInstance: ${text.decode(base64.decode(snInstanceRaw.payload.data))}
          - snUser: ${text.decode(base64.decode(snUserRaw.payload.data))}
          - snPass: ${text.decode(base64.decode(snPassRaw.payload.data))}


    - buildBasicAuth:
        assign:
          - basicToken: ${"Basic " + base64.encode(text.encode(snUser + ":" + snPass))}


    - normalizeSN:
        assign:
          - snClean1: ${text.replace_all(snInstance, "\n", "")}
          - snClean2: ${text.replace_all(snClean1, "\r", "")}
          - snClean3: ${text.replace_all(snClean2, "\t", "")}
          - snClean4: ${text.replace_all(snClean3, " ", "")}
          - snNoQuote: ${text.replace_all(text.replace_all(snClean4, "\"", ""), "'", "")}
          - snNoScheme: ${text.replace_all(text.replace_all(snNoQuote, "https://", ""), "http://", "")}
          - snHost: ${text.split(snNoScheme, "/")[0]}
          - snUrl: ${"https://" + snHost + "/api/now/table/incident"}


    - servicenow:
        try:
          call: http.post
          args:
            url: ${snUrl}
            timeout: 30
            headers:
              Authorization: ${basicToken}
              Content-Type: application/json
              Accept: application/json
            body:
              short_description: ${shortDesc}
              description: ${analysis.body.report.summary}
              severity: ${sev}
              u_mitre_techniques: ${json.encode_to_string(techniquesArr)}
              work_notes: ${notes}
          result: snow
        retry:
          predicate: ${http.default_retry_predicate}
          max_retries: 2
          backoff:
            initial_delay: 2
            max_delay: 10
            multiplier: 2.0
        except:
          as: e
          steps:
            - noteSNError:
                assign:
                  - snowBody: ${snowBody}


    - captureSN:
        assign:
          - snowBody: ${default(snow.body, snowBody)}


    - return:
        return:
          analysis: ${analysis.body.report}
          servicenow: ${snowBody}
