import base64
import json
import logging
import os
import time
from typing import Any, Dict


import requests
from flask import Request
from google.cloud import secretmanager
import vertexai
from vertexai.generative_models import GenerativeModel


PROJECT = os.environ.get("GCP_PROJECT")
LOCATION = os.environ.get("GCP_REGION", "us-central1")
VT_SECRET_NAME = os.environ.get("VT_SECRET_NAME", "VT_API_KEY")


_http = requests.Session()
_DEFAULT_TIMEOUT = (5, 30)


def entry(request):
    data = request.get_json(silent=True) or {}
    return (
        json.dumps({"ok": True, "echo": data}),
        200,
        {"Content-Type": "application/json"}
    )

def _json(body: Dict[str, Any], status: int = 200):
    return (json.dumps(body), status, {"Content-Type": "application/json"})




def _secret(name: str) -> str:
    try:
        client = secretmanager.SecretManagerServiceClient()
        path = f"projects/{PROJECT}/secrets/{name}/versions/latest"
        resp = client.access_secret_version(request={"name": path})
        return resp.payload.data.decode("utf-8")
    except Exception as e:
        logging.exception("Secret read failed for %s", name)
        raise RuntimeError(f"secret {name} not accessible") from e




def vt_lookup(payload: Dict[str, Any]) -> Dict[str, Any]:
    vt_api = _secret(VT_SECRET_NAME)
    headers = {"x-apikey": vt_api}


    t = payload.get("type")
    v = payload.get("value")
    if t not in {"url", "hash", "file"} or not v:
        raise ValueError("payload must include 'type' (url|hash|file) and 'value'")


    if t == "url":
        r = _http.post(
            "https://www.virustotal.com/api/v3/urls",
            headers=headers,
            data={"url": v},
            timeout=_DEFAULT_TIMEOUT,
        )
        r.raise_for_status()
        analysis_id = r.json()["data"]["id"]


        for _ in range(25):
            p = _http.get(
                f"https://www.virustotal.com/api/v3/analyses/{analysis_id}",
                headers=headers,
                timeout=_DEFAULT_TIMEOUT,
            )
            p.raise_for_status()
            j = p.json()
            if j.get("data", {}).get("attributes", {}).get("status") == "completed":
                return j
            time.sleep(2)


    if t == "hash":
        r = _http.get(
            f"https://www.virustotal.com/api/v3/files/{v}",
            headers=headers,
            timeout=_DEFAULT_TIMEOUT,
        )
        r.raise_for_status()
        return r.json()


    raw = base64.b64decode(v)
    files = {"file": ("suspicious.bin", raw)}
    r = _http.post(
        "https://www.virustotal.com/api/v3/files",
        headers=headers,
        files=files,
        timeout=_DEFAULT_TIMEOUT,
    )
    r.raise_for_status()
    return r.json()




def extract_indicators(vt_json: Dict[str, Any]) -> Dict[str, Any]:
    attrs = vt_json.get("data", {}).get("attributes", {})
    stats = attrs.get("stats") or attrs.get("last_analysis_stats") or {}
    vendors = attrs.get("results") or attrs.get("last_analysis_results") or {}
    detected = [k for k, v in vendors.items() if v.get("category") == "malicious"]
    return {
        "detection_stats": stats,
        "malicious_vendors": detected[:20],
    }




def summarize(vt_json: Dict[str, Any], metadata: Dict[str, Any]) -> Dict[str, Any]:
    try:
        vertexai.init(project=PROJECT, location=LOCATION)
        model = GenerativeModel("sec-palm-2")


        prompt = (
            "You are a security analyst. Summarize VirusTotal results and map to MITRE ATT&CK.\n"
            "Return compact JSON with fields: "
            "summary, severity (low|medium|high|critical), "
            "mitre_techniques (['Txxxx[.xxx]']), iocs (object), recommended_actions (array).\n"
            f"VT: {json.dumps(vt_json)[:12000]}\n"
            f"Metadata: {json.dumps(metadata)}\n"
            "Only return JSON."
        )
        out = model.generate_content(prompt).text.strip()
        return json.loads(out)
    except Exception as e:
        logging.warning("Vertex summarize failed; falling back: %s", e)
        ind = extract_indicators(vt_json)
        return {
            "summary": "Automatic summary unavailable; returning extracted indicators.",
            "severity": "medium",
            "mitre_techniques": [],
            "iocs": ind,
            "recommended_actions": [
                "Review indicators in work notes.",
                "Hunt for related activity.",
                "Consider containment if additional detections found.",
            ],
        }




def entry(request: Request):
    try:
        body = request.get_json(silent=True) or {}
        t = body.get("type")
        v = body.get("value")
        if not t or not v:
            return _json({"error": "missing 'type' or 'value'"}, 400)


        vt = vt_lookup(body)
        report = summarize(vt, body.get("metadata", {}))


        trimmed = extract_indicators(vt)
        return _json({"vt_indicators": trimmed, "report": report}, 200)


    except requests.HTTPError as e:
        status = getattr(e.response, "status_code", 502)
        text = getattr(e.response, "text", str(e))
        logging.exception("VirusTotal HTTP error: %s", text)
        return _json({"error": "virustotal_error", "status": status, "detail": text}, 502)


    except RuntimeError as e:
        logging.exception("Configuration error")
        return _json({"error": "config_error", "detail": str(e)}, 500)


    except Exception as e:
        logging.exception("Unhandled error in vt-analyze")
        return _json({"error": "internal", "detail": str(e)}, 500)
